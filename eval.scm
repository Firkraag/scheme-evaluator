(load "syntax.scm")
(define underlying-apply apply)
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable exp env))
        ((quote? exp) (text-of-quote exp))
        ((lambda? exp) (make-procedure exp env))
        ((definiton? exp) (eval-definition exp env))
        ((assigenment? exp) (eval-assignment exp env))
        ((if? exp) (eval-if exp env))
        ((cond? exp) (eval-if (cond->if exp) env))
        ((application? exp) 
         (apply (operator exp)
                (list-of-values (operands exp) env)  env))
        (else
          (error "Unknown expression type: EVAL" exp))
        ))

(define (apply proc args env)
  (cond ((primitive-procedure? proc)
         (underlying-apply (procedure-body proc) args))
        ((compound-procedure? proc)
         (eval-sequence (procedure-body proc)
                        (extend-environment (procedure-parameters proc)
                                           args
                                           env)
                        ))
        (else
          (error "Unknown expression type: APPLY" exp))
        ))
